
// перивести названия функций к такому виду  this.field и пт. все это обернуть в функию конструктор BatleField.

// Обернуть морской бой в функцию конструктор  с приватными и публичными свойствами.

var chip,opened,msg;
var res = [];
// конструктор пустых объектов.
function Obj() {
	this.chip=false;
	this.opened=false;
	this.msg = "Промазал!";
};

//  Функция по созданию поля.
function field () {
	var x = +prompt('Введите ширину поля');
	var y = +prompt('Введите высоту поля');
	for (var i = 0; i<x; i++) {
		res [i] = [];
		for (var j = 0; j<y; j++) {
			res [i][j] = new Obj();
		};
	};
	return res;
	};
	this.getRes = function () {
		return res;
};

// функция размещения кораблей.
function putChip (x,y) {
	res [x][y].chip = true ; // сначала создастся переменная chip, глобальная, ей присвоится тру, а потом res [x][y] получит значение этой переменной chip
	res [x][y].msg = "Попал!";
};


// setMsg (7,8,'msg'); //меняет сообзение во время выстрела.
// ________________по этим координатам необходимо изменить сообщение (msg).
function setMsg (x,y,'msg') {
	res [x][y].msg = "msg"
};

// hit (9,10); // выводит сообщение о подбитии корабля.
function hit (x,y) {
	if (res [x][y].chip = true){
		alert(res [x][y].msg);
		 						// необходимо реализовать закрытие клетки  после подбития корабля.
		};
	}


// ___________  Сообщение "таких кооржинат не существует!"
function coordChech (x,y) {
	if (x!== field.x|| y!== field.y) {  //Необходимо обращаться к введенным значениям при создании поля или же пожно при создании поля пцшить их в массив.
										//Или просто присваивать на другие переменные и уже потом сравнивать тут.
		alert("Таких координат не существует!")
	}; // не  работает. пересмотреть сравнение.!!!
}

// _________ Проверка оставшихся кораблей.
			// Можно пушить в массив все координаты кораблей и потом просто проверять этот массив на наличие ячеек со статусом chip = true.




