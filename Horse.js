Horse.prototype.totalmileadge = 0;

function Horse (name) {
	var name = name;
	this.mileadge = 0;
	var alreadyRunned = 0;
	var leftToRun = mileage - alreadyRunned;
	var tiredness = 0;
	this.run = function (n) {
		this.mileadge += n;
		Horse.prototype.totalmileadge += n;
	};
};

	function rest(callback, leftToRun) {
     	setTimeout(function() {
          	tiredness = 0;
          	callback(leftToRun)
     	})
	}


	var r = new Horse (1);
	r.run (20);
	var r2 = new Horse (2);
	r2.run (50);
	r.totalmileadge;
	r2.totalmileadge;



// ДЗ: Модифицируйте конструктор Horse следующим образом: добавьте свойство - усталость. 
// Каждые 1 км пробега добавляет 1 единицу усталости. 
// Когда усталость достигает 10 - лошадь должна отдохнуть 1 секунду. 
// Реализуйте это в методе  - отдых, который принимает как параметр функции, метод  - который должен выполнятся после отдыха и параметры этого метода. 
// Задача метода выводить сообщение “Лошадь отдыхает”. Задержку в 1 секунду реализуйте с помощью функции SetTimeout. 
// После чего должна обнуляться усталость и  выполнятся метод, который пришел как параметр функции.
//  Например: лошадь должна пробежать 8 км. 
//  На текущий момент усталость составляет 4 единицы. Когда лошадь пробежит 6 км - усталость достигнет 10 единиц. 
//  На этом моменте лошадь должна отдохнуть 1 секунду. Усталость при этом обнулится. И после отдыха лошадь должна добежать оставшиеся 2 км.



// var mileage = 12;
// var alreadyRunned = 0; // сколько уже пробежал за этот забег
// var leftToRun = mileage - alreadyRunned; // сколько осталось бежать
// var tiredness = 0; // усталость - пробежали 1 км, увеличили усталость на 1.

// // эта функция вызывется, если усталость == 10, как аргумент передаем функцию бега с 
// // остатком ,сколько осталось бежать.
// function rest(callback, leftToRun) {
//      setTimeout(function() {
//           tiredness = 0;
//           callback(leftToRun)
//      })
// }
// это тебе россыпью, осталось это связать в рабочий код